dist: trusty

env:
  IMAGE: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME

jobs:
  include:
    - stage: build users
      services:
        - docker
      script:
        - echo "$CI_REGISTRY_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin
        - docker pull $IMAGE:users || true
        - docker build --cache-from $IMAGE:users --tag $IMAGE:users --file ./services/users/Dockerfile.prod --build-arg SECRET_KEY=$SECRET_KEY "./services/users"
        - docker push $IMAGE:users

    - stage: build client
      services:
        - docker
      before_script:
        - export REACT_APP_API_SERVICE_URL=http://localhost:5004
      script:
        - echo "$CI_REGISTRY_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin
        - docker pull $IMAGE:client || true
        - docker build --cache-from $IMAGE:client --tag $IMAGE:client --file ./services/client/Dockerfile.ci "./services/client"
        - docker push $IMAGE:client
    
    - stage: test users
      services:
        - docker
        - postgresql
      before_install:
        - docker pull $IMAGE:users
        - docker run -it $IMAGE/users sh
      # before_script:
      #   - psql -c "CREATE DATABASE users;" -U postgres
      #   - psql -c "CREATE USER runner WITH PASSWORD 'runner';" -U postgres
      #   - export POSTGRES_DB=users
      #   - export POSTGRES_USER=runner
      #   - export POSTGRESS_PASSWORD=runner
      #   - export FLASK_ENV=development
      script:
      #   - cd /usr/src/app
      #   - pip install -r requirements-dev.txt
      #   - python -m pytest "src/test" -p no:warnings
      #   - python -m flake8 src
      #   - python -m black src --check
      #   - python -m isort src --check-only
          - echo "Hi"

